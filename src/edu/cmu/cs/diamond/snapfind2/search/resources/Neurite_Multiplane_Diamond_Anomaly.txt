/*
 *  StrangeFind, an anomaly detection system for the OpenDiamond Platform
 *
 *  Copyright (c) 2007-2008 Carnegie Mellon University
 *  All rights reserved.
 *
 *  StrangeFind is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, version 2.
 *
 *  StrangeFind is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with StrangeFind. If not, see <http://www.gnu.org/licenses/>.
 *
 *  Linking StrangeFind statically or dynamically with other modules is
 *  making a combined work based on StrangeFind. Thus, the terms and
 *  conditions of the GNU General Public License cover the whole
 *  combination.
 * 
 *  In addition, as a special exception, the copyright holders of
 *  StrangeFind give you permission to combine StrangeFind with free software
 *  programs or libraries that are released under the GNU LGPL or the
 *  Eclipse Public License 1.0. You may copy and distribute such a system
 *  following the terms of the GNU GPL for StrangeFind and the licenses of
 *  the other code concerned, provided that you include the source code of
 *  that other code when and as the GNU GPL requires distribution of source
 *  code.
 *
 *  Note that people who make modified versions of StrangeFind are not
 *  obligated to grant this special exception for their modified versions;
 *  it is their choice whether to do so. The GNU General Public License
 *  gives permission to release a modified version without this exception;
 *  this exception also makes it possible to release a modified version
 *  which carries forward this exception.
 */

print("MACRO BEGIN");

run("Set Measurements...", "area center perimeter bounding fit circularity area_fraction redirect=None decimal=3");

// get id of stack
var stackID = getImageID();

// collapse slices
run("Z Project...", "start=1 stop=5 projection=Median");

// setup
var orig = getImageID();
print("MACRO orig = " + orig);

// account for background illumination
print("MACRO Fit Polynomial");
run("Fit Polynomial", "x=2 y=2 mixed=2");
run("16-bit");

// duplicate
run("Duplicate...", "title=Duplicate");
var dup = getImageID();
print("MACRO dup = " + dup);
run("Duplicate...", "title=Duplicate2");
var dup2 = getImageID();
print("MACRO dup2 = " + dup2);

print("MACRO select image " + orig);
selectImage(orig);
close();
selectImage(stackID);
close();

// process cells
selectImage(dup);
print("MACRO multithresholder");
run("MultiThresholder", "IsoData apply");
print("MACRO watershed");
run("Watershed");
run("Analyze Particles...", "size=10-200 circularity=0.20-1.00 show=Masks include clear record");

// record info about cells
print("MACRO numCells: " + numCells);
var numCells = nResults;
if (numCells != 0) {
  var totalCellArea = 0;
  for (i = 0; i < nResults; i++) {
    totalCellArea += getResult("Area", i);
  }

  // rename mask and collect selection
  rename("Cells");
  var cellMask = getImageID();
  run("Create Selection");

  // close
  selectImage(dup);
  close();


  // mask out cells in order to process neurites
  selectImage(dup2);
  run("Restore Selection");
  run("Enlarge...", "enlarge=3");
  run("Make Inverse");

  //run("MultiThresholder", "IsoData apply");
  setAutoThreshold();
  run("Convert to Mask");

  run("Restore Selection");

  // possibly invert (depends on what autothreshold has done)
  var z;
  var hist = newArray(256);
  getStatistics(z, z, z, z, z, hist);
  if (hist[0] < hist[255]) {
    run("Invert");
  }

  // find the neurites
  run("Analyze Particles...", "size=30-2000 circularity=0.00-0.70 show=Nothing clear record");

  // record info about neurites
  var numNeurites = nResults;
  var totalNeuriteArea = 0;
  for (i = 0; i < nResults; i++) {
    totalNeuriteArea += getResult("Area", i);
  }

  // close
  selectImage(dup2);
  close();
  selectImage(cellMask);
  close();
}

  // report
call("ijloader.IJLoader.writeDiamondAttribute", "total.number.of.neurites", numNeurites);
call("ijloader.IJLoader.writeDiamondAttribute", "total.length.neurites", totalCellArea);
call("ijloader.IJLoader.writeDiamondAttribute", "number.of.cells,", numCells);
call("ijloader.IJLoader.writeDiamondAttribute", "average.area.of.cell.body.per.cell", (totalCellArea / numCells));
call("ijloader.IJLoader.writeDiamondAttribute", "neurites.per.cell", (numNeurites / numCells));
//call("ijloader.IJLoader.writeDiamondAttribute", "length.neurites.per.cell", "");
call("ijloader.IJLoader.writeDiamondAttribute", "total.area.neurites", totalNeuriteArea);
call("ijloader.IJLoader.writeDiamondAttribute", "area.neurites.per.cell", (totalNeuriteArea / numCells));

run("Diamond Filter", "expr=1.0");
